" vim: set fdm=marker
" vim: set foldlevel=0

let s:running_windows = has("win16") || has("win32") || has("win64")

if !has("nvim")
  " set Vim-specific sequences for RGB colors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum" " let &t_ut=''
  set t_Co=256
endif

set termguicolors

syntax enable

if s:running_windows
  let s:editor_root=expand("~/AppData/Local/nvim")
if has("nvim")
  let s:editor_root=expand("~/.config/nvim")
else
  let s:editor_root=expand("~/.vim")
endif

" Plugins -------------------------------------------------------------------- {{{

" Setting up plugins {{{
if empty(glob(s:editor_root . '/autoload/plug.vim'))
  autocmd VimEnter * echom "Downloading and installing vim-plug..."
  silent execute "!curl -fLo " . s:editor_root . "/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall
endif

call plug#begin(s:editor_root . '/plugged/')
" }}}

" Colorschemes {{{
Plug 'romainl/Apprentice'
Plug 'chriskempson/base16-vim'
" }}}

" File navigation {{{
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'vim-scripts/FSwitch'
" }}}

" To sort {{{
Plug 'mbbill/undotree'
" Plug 'Shougo/vimproc', { 'do' : 'make' }

Plug 'tpope/vim-dispatch' " dispatch.vim: asynchronous build and test dispatcher
Plug 'radenling/vim-dispatch-neovim'

Plug 'tpope/vim-unimpaired'

Plug 'ciaranm/securemodelines'
Plug 'embear/vim-localvimrc'
Plug 'mhinz/vim-signify'

Plug 'bronson/vim-trailing-whitespace'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'chrisbra/unicode.vim'
Plug 'sbdchd/neoformat'

" }}}

" Status bar {{{
Plug 'vim-airline/vim-airline'
" }}}

" Search {{{
Plug 'justinmk/vim-sneak'
" }}}

" Text Objects {{{
Plug 'wellle/targets.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function' " af, if, aF, iF
Plug 'kana/vim-textobj-fold' " az, iz
" }}}

" Tags {{{
Plug 'majutsushi/tagbar'
" }}}

" Completion {{{
Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': './install.sh'}
Plug 'Shougo/deoplete.nvim',  { 'do': function('myfunctions#utils#UpdateRPlugins') }
Plug 'roxma/nvim-yarp', myfunctions#utils#Cond(!has('nvim'))
Plug 'roxma/vim-hug-neovim-rpc', myfunctions#utils#Cond(!has('nvim'))
Plug 'Shougo/echodoc.vim'
Plug 'Shougo/context_filetype.vim'
Plug 'mhartington/deoplete-typescript', { 'for': 'typescript' }
Plug 'eagletmt/neco-ghc'

" }}}

" Snippets {{{
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" }}}

" Database {{{
Plug 'lifepillar/pgsql.vim', { 'for': 'pgsql' }
Plug 'vim-scripts/dbext.vim' " 2.00  Provides database access to many DBMS (Oracle, Sybase, Microsoft, MySQL, DBI,..)
" }}}

" Dev Tools {{{
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'Shougo/vinarise.vim'
Plug 'diepm/vim-rest-console' " A REST console for Vim.
Plug 'benekastah/neomake'
Plug 'vim-scripts/DoxygenToolkit.vim'
" }}}

" Filetype specific {{{
Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp'}
Plug 'vim-jp/vim-cpp', { 'for': 'cpp'}
Plug 'IN3D/vim-raml' " RAML plugin for VIM
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'markdown' }
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'wannesm/wmgraphviz.vim'
Plug 'chrisbra/csv.vim', { 'for': 'csv'}  " A Filetype plugin for csv files

" HTML/CSS/Javascript/Typescript {{{
Plug 'tpope/vim-ragtag', { 'for': 'html'}
Plug 'othree/html5.vim', { 'for': 'html'}

Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
" }}}
" Python {{{
Plug 'klen/python-mode', { 'for': 'python'}
Plug 'davidhalter/jedi-vim', { 'for': 'python'}
" }}}
" Haskell {{{
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
Plug 'enomsg/vim-haskellConcealPlus', { 'for': 'haskell' }
Plug 'bitc/vim-hdevtools', { 'for': 'haskell' }
" }}}
" }}}

call plug#end()
" }}}

filetype on
filetype plugin indent on

" Colors {{{
syntax on

augroup UserColors
  autocmd!
  autocmd ColorScheme * highlight User1 cterm=bold ctermfg=14 guifg=#e1a3ee ctermbg=1 guibg=#202020 " Identifier
augroup END

colorscheme base16-chalk

" }}}

" Vim jump to the last position when reopening a file
augroup GoToLastPosition
  autocmd!
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
augroup END
" http://vim.wikia.com/wiki/Avoid_scrolling_when_switch_buffers {{{

" When switching buffers, preserve window view.
augroup SaveWindowView
  autocmd!
  autocmd BufLeave * call myfunctions#viewsettings#AutoSaveWinView()
  autocmd BufEnter * call myfunctions#viewsettings#AutoRestoreWinView()
augroup END
" }}}

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search

if exists('&inccommand')
  set inccommand=nosplit
endif

set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=a         " Enable mouse usage (all modes) in terminals
set hlsearch      " highlight search terms
set history=10000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore+=*.swp,*.bak,*.pyc,*.class
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.d,*.o     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
set wildignore+=*.doc,*.docx,*.pdf,*.ppt,*.pptx,*.xls,*.wmv  " Windows
set wildignore+=*.bbl,*.synctex.gz,*.blg,*.aux
set wildignore+=*\\vendor\\**
set wildignore+=*/vendor/**
set wildignorecase
set wildmode=list:longest,full
set title
set undofile
set showmode
set wildmenu
set laststatus=2
set scrolloff=5 " Keep 5 lines (top/bottom)
set shortmess=aOstT " shortens messages to avoid 'press a key' prompt
set sidescrolloff=5 " Keep 5 lines at the size
set shiftround " when at 3 spaces, and I hit > ... go to 4, not 5
set report=0


set list listchars=trail:•,tab:»·

set splitright
set splitbelow

set breakindent
set breakindentopt+=sbr

set tags=tags,./tags,~/.vimtags
set completeopt+=longest

" Set the command window height to 2 lines, to avoid many cases of having to
" press <Enter> to continue
set cmdheight=2

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Vim directories settings {{{
if s:running_windows
  set backupdir=~/AppData/Local/nvim-data/backup " where to put backup files
  set undodir=~/AppData/Local/nvim-data/undo " where to put undo files
  set directory=~/AppData/Local/nvim-data/temp " directory to place swap files in
elseif has("nvim")
  set backupdir=~/.local/share/nvim/backup " where to put backup files
  set undodir=~/.local/share/nvim/undo " where to put undo files
  set directory=~/.local/share/nvim/swap " directory to place swap files in
else
  set backupdir=~/.local/share/vim/backup " where to put backup files
  set undodir=~/.local/share/vim/undo" where to put undo files
  set directory=~/.local/share/vim/swap " directory to place swap files in
endif

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
" }}}


let mapleader = "\<Space>"
let maplocalleader = "\\"
set colorcolumn=81

set nocp
filetype plugin on

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set tabstop=4
set shiftwidth=2
set expandtab
set softtabstop=2

if has("spell")
  " limit it to just the top 10 items
  set sps=best,10
  set spelllang=en,pl
endif

set number
set numberwidth=5
set relativenumber
set cursorline

" Number line settings {{{
" --------------------------------------------------------------------------------
augroup NumberLines
  autocmd!
  autocmd FocusLost * set norelativenumber
  autocmd WinLeave * set norelativenumber
  autocmd InsertEnter * set norelativenumber

  autocmd FocusGained * set relativenumber
  autocmd WinEnter * set relativenumber
  autocmd InsertLeave * set relativenumber
augroup END
" }}}


augroup MakeDirectoryOnSave
  autocmd!
  autocmd BufWritePre,FileWritePre * :call myfunctions#utils#AutoMakeDirectory()
augroup END
" }}}

if $DISPLAY =~ '^localhost:' || $DISPLAY == ''
  set clipboard=autoselect,exclude:.*
endif

set switchbuf=useopen ",usetab,newtab
set showtabline=1
set tabpagemax=15

command! -nargs=+ -complete=file_in_path -bar Grep silent! grep! <args> | redraw!
set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column\ --vimgrep\ --ignore\ '.git'

" Mappings ---------------------------------------------------------------- {{{

nnoremap <Space>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <Space>sv :source $MYVIMRC<CR>
nnoremap <Space>ev :e  $MYVIMRC<CR>
nnoremap <Space>eev :vsplit  $MYVIMRC<CR>
nnoremap <Space>l :s/\.\ /\.\r/g<CR>:nohl<CR>
nnoremap <silent> <C-L> :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr>:sign unplace *<cr><c-l>

" reindent
nnoremap <Space>= :keepjumps normal mzgg=Gg`zzz<CR>
nnoremap <Space>sf :FSHere<CR>

" Window nagiating {{{
nnoremap    <M-k>       <C-W>k
nnoremap    <M-j>       <C-W>j
nnoremap    <M-l>       <C-W>l
nnoremap    <M-h>       <C-W>h
" }}}

"===============================================================================
" Command-line Mode Key Mappings
"===============================================================================

" Bash like keys for the command line. These resemble personal zsh mappings
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Ctrl-[hl]: Move left/right by word
cnoremap <c-h> <s-left>
cnoremap <c-l> <s-right>

" Ctrl-space: Show history
cnoremap <c-@> <c-f>

cnoremap <c-j> <down>
cnoremap <c-k> <up>
cnoremap <c-f> <left>
cnoremap <c-g> <right>

cnoremap w!! w !sudo tee % >/dev/null
" }}}

noremap <silent><Space><bs> :bprevious\|bdelete #<CR>
noremap <Space><Space><bs> :bdelete!<CR>
noremap <Space>3 :TagbarToggle<CR>
nnoremap <Space>2 :UndotreeToggle<CR>
nnoremap <F12> :set invpaste paste?<CR>
inoremap <F12> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F12>

nnoremap <Space>z zMzvzz
nnoremap <Space>ss O//<esc>70A-<esc>

nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
nnoremap Y y$

" better indentation
xnoremap < <gv
xnoremap > >gv

" saving file {{{
nnoremap <Space>w :w<CR>
" }}}

" copy & paste {{{
vmap <Space>y "+y
nmap <Space>p "+p
nmap <Space>P "+P
vmap <Space>p "+p
vmap <Space>P "+P
" }}}

"===============================================================================
" Insert Mode Ctrl Key Mappings
"===============================================================================
" Ctrl-w: Delete previous word, create undo point
inoremap <c-w> <c-g>u<c-w>

" Ctrl-u: Delete til beginning of line, create undo point
inoremap <c-u> <c-g>u<c-u>

"===============================================================================
" Normal Mode Key Mappings
"===============================================================================
"n: Next, keep search matches in the middle of the window
"
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap <Space>q :cclose<bar>lclose<cr>

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

inoremap <expr><C-d> pumvisible() ? "<PageDown>" : "<C-d>"
inoremap <expr><C-u> pumvisible() ? "<PageUp>" : "<C-g>u<C-u>"

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
      \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <C-p> pumvisible() ? '<C-p>' :
      \ '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<CR>'


" }}}

" Folding ----------------------------------------------------------------- {{{
set foldlevelstart=99
" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO
set foldtext=myfunctions#fold#MyFoldText()

" }}}
" Filetype-specific ------------------------------------------------------- {{{

" QuickFix {{{

augroup ft_quickfix
  autocmd!
  autocmd FileType qf wincmd J
  autocmd Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap tw=0
augroup END
" }}}
" Vim {{{
augroup ft_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType help setlocal textwidth=78
  autocmd BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}

" }}}

" Plugin settings --------------------------------------------------------- {{{
" Todo {{{
command! Todo call myfunctions#todo#todo()
" }}}

" Doxygen {{{
let g:DoxygenToolkit_authorName="Przemysław Walkowiak <przemkovv@gmail.com>"
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:doxygen_enhanced_color=1
" }}}
" undotree {{{
let g:undotree_WindowLayout = 2
let g:undotree_SplitWidth = 33
" }}}
" nerdcommenter {{{
let g:NERDSpaceDelims = 1
let g:NERDCreateDefaultMappings = 0

vmap <Space>cc  <Plug>NERDCommenterComment
vmap <Space>cu  <Plug>NERDCommenterUncomment
nmap <Space>cc  <Plug>NERDCommenterComment
nmap <Space>cu  <Plug>NERDCommenterUncomment
" }}}
" netrw {{{
let g:netrw_winsize = -40
let g:netrw_liststyle = 3
" }}}
" airline {{{
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#show_buffers = 0

let g:airline#extensions#vimtex#enabled = 1

let g:airline#extensions#branch#empty_message = "No SCM"
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#hunks#enabled = 0
let g:airline_inactive_collapse = 1
let g:airline_detect_modified=0

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''

let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }



augroup Airline
  autocmd!
  autocmd User AirlineAfterInit call myfunctions#airline#AirlineInit()
augroup END

let g:airline#extensions#whitespace#trailing_format = 'tr[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mi[%s]'
let g:airline#extensions#whitespace#long_format = 'long[%s]'
let g:airline#extensions#whitespace#mixed_indent_file_format = 'mi[%s]'

"}}}
" dbext {{{
let g:dbext_default_usermaps = 0
vnoremap  <localleader>se :DBExecVisualSQL<CR>
vnoremap  <localleader>st :DBSelectFromTable<CR>
nnoremap  <localleader>se :DBExecSQLUnderCursor<CR>
nnoremap  <localleader>slc :DBListColumn<CR>
nnoremap  <localleader>sdt :DBDescribeTable<CR>
" }}}
" Sneak {{{

let g:sneak#streak = 1
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
" }}}
" Secure Modelines {{{
let g:secure_modelines_allowed_items = [
      \ "textwidth",   "tw",
      \ "foldmethod",  "fdm",
      \ "foldnextmax",  "fdn",
      \ "foldlevel", "foldlevelstart",
      \ "spelllang",
      \ ]
" }}}
" Signify {{{
let g:signify_vcs_list = [ 'git', 'svn' ]
let g:signify_mapping_next_hunk = ']c'
let g:signify_mapping_prev_hunk = '[c'
nmap <nop> <plug>(signify-toggle-highlight)
nmap <nop> <plug>(signify-toggle)
omap <nop> <plug>(signify-motion-inner-pending)
xmap <nop> <plug>(signify-motion-inner-visual)
omap <nop> <plug>(signify-motion-outer-pending)
xmap <nop> <plug>(signify-motion-outer-visual)
" }}}
" Local VIM RC {{{
let g:localvimrc_name = ".localvimrc"
let g:localvimrc_sandbox = 0
let g:localvimrc_persistent = 1
" }}}
" UltiSnips {{{
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" }}}
" Fugitive {{{
nnoremap <Space>gs :Gstatus<Cr>
nnoremap <Space>gc :Gcommit<Cr>
nnoremap <Space>gl :Glog<Cr>
" }}}
" fzf {{{
"
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 0
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
let $FZF_DEFAULT_OPTS .= ' --inline-info'
let g:fzf_launcher = 'termite --geometry 120x30 -e "sh -c %s"'
nnoremap <Space>r :Ag<CR>
nnoremap <Space>R :Ag <C-r>=expand('<cword>')<CR><CR>

command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
nnoremap <Space>? :Helptags<cr>
nnoremap <Space>f :Files<cr>
nnoremap <Space>F :GFiles?<cr>
nnoremap <Space>mr :History<cr>
nnoremap <Space>mn :<c-u>call fzf#vim#maps('n', 0)<cr>
nnoremap <Space>mv :<c-u>call fzf#vim#maps('x', 0)<cr>
nnoremap <Space>mi :<c-u>call fzf#vim#maps('i', 0)<cr>
nnoremap <Space>mo :<c-u>call fzf#vim#maps('o', 0)<cr>
nnoremap <Space>b :Buffers<cr>
nnoremap <Space>t :BTags<cr>
nnoremap <Space>T :Tags<cr>
nnoremap \c :Colors<cr>

let g:fzf_files_options=' --bind alt-a:select-all,alt-d:deselect-all '
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)


let g:fzf_action = {
      \ 'ctrl-q': function('myfunctions#fzf#build_location_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }
"
" }}}
" Tagbar {{{
let g:tagbar_left = 1
let g:tagbar_width = 33
let g:tagbar_compact = 1
" }}}
" Neomake {{{

nnoremap <Space>h :Neomake!<CR>
nnoremap <Space>H :Neomake<CR>
"let g:neomake_verbose=1
let g:neomake_open_list = 2
let g:neomake_place_signs = 1
let g:neomake_verbose = 0
let g:neomake_ft_maker_remove_invalid_entries = 1


augroup my_neomake_hooks
  au!
  autocmd User NeomakeJobFinished call myfunctions#neomake#MyOnNeomakeJobFinished()
augroup END

" }}}
" LanguageClient-neovim {{{
let g:LanguageClient_diagnosticsList = "Location"
let g:LanguageClient_hasSnippetSupport = 0
let g:LanguageClient_serverCommands = {
      \ 'python': ['pyls'],
      \ 'cpp': ['cquery','--language-server', '--log-file=/tmp/cq.log'],
      \ 'c': ['cquery','--language-server', '--log-file=/tmp/cq.log']
      \ }
let g:LanguageClient_loadSettings = 1
let g:LanguageClient_rootMarkers = {
      \ 'cpp': ['compile_commands.json', 'build'],
      \ }
" let g:LanguageClient_loggingLevel='DEBUG'
let g:LanguageClient_settingsPath = s:editor_root .'/settings.json'
augroup lsp_client
  autocmd!
  autocmd FileType python,cpp,c  nnoremap <buffer> <silent> K :call LanguageClient_textDocument_hover()<CR>
  autocmd FileType python,cpp,c  nnoremap <buffer> <silent> gd :call LanguageClient_textDocument_definition()<CR>zz
  autocmd FileType python,cpp,c  nnoremap <buffer> <silent> <Space>d :call LanguageClient_textDocument_references()<CR>
  autocmd FileType python,cpp,c  nnoremap <buffer> <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
augroup END

augroup LanguageClient_config
  autocmd!
  autocmd BufEnter * let b:Plugin_LanguageClient_started = 0
  autocmd User LanguageClientStarted setl signcolumn=yes
  autocmd User LanguageClientStarted let b:Plugin_LanguageClient_started = 1
  autocmd User LanguageClientStopped setl signcolumn=auto
  autocmd User LanguageClientStopped let b:Plugin_LanguageClient_stopped = 0
  " autocmd CursorMoved * if b:Plugin_LanguageClient_started | call LanguageClient_textDocument_hover() | endif
augroup END

" }}}
"
" deoplete {{{
let g:deoplete#enable_at_startup =1
let g:deoplete#disable_auto_complete = 1
let g:deoplete#enable_smart_case =1

let g:echodoc_enable_at_startup = 1
let g:deoplete#tag#cache_limit_size = 500000
" let g:deoplete#auto_refresh_delay = 150

if has('g:loaded_deoplete')
  " Use head matcher instead of fuzzy matcher
  call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])
  call deoplete#custom#option('ignore_sources', {'_': ['arround']})
endif

" }}}
" Vim-notes {{{
let g:notes_directories = ['~/Documents/notes']
" }}}
" CSV {{{
let g:csv_autocmd_arrange = 1
" }}}
" Gist {{{
let g:gist_post_private = 1
let g:gist_show_privates = 1
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
" }}}

" }}}


